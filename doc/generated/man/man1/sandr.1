'\" t
.\"     Title: sandr
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.18
.\"      Date: 2025-04-16
.\"    Manual: User commands
.\"    Source: sandr 0.0.7
.\"  Language: English
.\"
.TH "SANDR" "1" "2025-04-16" "sandr 0.0.7" "User commands"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
sandr \- Perform pattern replacement in files
.SH "SYNOPSIS"
.sp
\fBsandr\fP [\fIOPTION\fP] [\fIFILE\fP]
.SH "DESCRIPTION"
.sp
\fBsandr\fP is a tool to replace strings in files or standard streams.
.sp
It supports replacements for \fBfixed strings\fP and \fBregular expressions\fP, ignoring case or not.
.sp
For \fBregular expressions\fP, matching groups can be reused in replacement string.
.sp
Some options permit to :
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
extract an association map (matches/replacements)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
apply an association map for mass replacements
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
try to keep the character case
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
preview modifications
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
allow file renaming
.RE
.sp
With no FILE, or when FILE is \f(CR\-\fP, read standard input.
.SH "OPTIONS"
.SS "Select and sort items"
.sp
\fB\-s\fP, \fB\-\-search\fP
.RS 4
The string to search.
.RE
.sp
\fB\-S\fP, \fB\-\-search\-regexp\fP
.RS 4
The pattern to search.
.RE
.sp
\fB\-r\fP, \fB\-\-replace\fP
.RS 4
The string (or the pattern) used to replace all matches.
.RE
.sp
\fB\-e\fP, \fB\-\-extract\-map\fP
.RS 4
Extract from file or standard input all matches of searched string or pattern.
A map created with found matches is displayed on standard output.
Entries of this map will be set with a default value.
.RE
.sp
\fB\-i\fP, \fB\-\-ignore\-case\fP
.RS 4
Search ignoring case.
.RE
.sp
\fB\-a\fP, \fB\-\-apply\-map\fP
.RS 4
Use a file containing the map to perform replacement.
.RE
.sp
\fB\-c\fP, \fB\-\-case\fP
.RS 4
Apply transformations to try to keep the same case after replacement (useful with \-i option).
.RE
.sp
\fB\-l\fP, \fB\-\-min\-matching\-length\fP
.RS 4
For case transformations, ignore matching group when the size is less than de specified value (default 3).
.RE
.sp
\fB\-t\fP, \fB\-\-simulate\fP
.RS 4
Perform a simulation for replacements.
The results will be displayed on standard output.
.RE
.sp
\fB\-d\fP, \fB\-\-diff\fP
.RS 4
Compare files before and after replacements.
.RE
.sp
\fB\-m\fP, \fB\-\-multiline\fP
.RS 4
Swith on the multiline mode.
.RE
.sp
\fB\-R\fP, \fB\-\-rename\fP
.RS 4
Rename files if path matches searched string or pattern.
.RE
.sp
\fB\-x\fP, \fB\-\-execute\fP
.RS 4
Execute the string (or the pattern) used to replace all matches as a command.
Then, the output of this command replaces all matches. The trailing newline is suppressed.
.RE
.SS "Others options"
.sp
\fB\-h\fP, \fB\-\-help\fP
.RS 4
Display help.
.RE
.sp
\fB\-v\fP, \fB\-\-version\fP
.RS 4
Display version.
.RE
.SH "EXAMPLES"
.sp
.B Use option \f(CR\-s\fP to search fixed string
.br
.sp
.if n .RS 4
.nf
.fam C
$ echo \*(AqHello John DOE\*(Aq | sandr \-s o \-r\*(Aq<o>\*(Aq
Hell<o> J<o>hn DOE
.fam
.fi
.if n .RE
.sp
.B Add option \f(CR\-i\fP to ignore case
.br
.sp
.if n .RS 4
.nf
.fam C
$ echo \*(AqHello John DOE\*(Aq | sandr \-i \-s o \-r\*(Aq<o>\*(Aq
Hell<o> J<o>hn D<o>E
.fam
.fi
.if n .RE
.sp
.B Add option \f(CR\-c\fP to try to reuse same case when replacing
.br
.sp
.if n .RS 4
.nf
.fam C
$ echo \*(AqHello John Doe and Jane DOE\*(Aq | sandr \-i \-c \-s \*(Aqdoe\*(Aq \-r \*(Aqsmith\*(Aq
Hello John Smith and Jane SMITH
.fam
.fi
.if n .RE
.sp
.B Use option \f(CR\-S\fP to search a pattern, the \f(CR\-r\fP option can contain a reference to a matched group
.br
.sp
.if n .RS 4
.nf
.fam C
$ echo \*(AqHello John DOE\*(Aq | sandr \-i \-c \-S \*(Aq([aeiouy])\*(Aq \-r\*(Aq<\(rs1>\*(Aq
H<e>ll<o> J<o>hn D<O><E>
.fam
.fi
.if n .RE
.sp
.B Use option \f(CR\-e\fP to extract a replacements map witch can be reused later
.br
.sp
.if n .RS 4
.nf
.fam C
$ echo \*(AqHello John DOE\*(Aq | sandr \-e \-i \-c \-S \*(Aq([aeiouy])\*(Aq \-r\*(Aq<\(rs1>\*(Aq > map
$ cat map
\-E
+<E>
\-\-\-
\-O
+<O>
\-\-\-
\-e
+<e>
\-\-\-
\-o
+<o>
.fam
.fi
.if n .RE
.sp
.B Use option \f(CR\-a\fP to apply a replacements map on files or standard streams
.br
The given map can be handwritten or generated with the \f(CR\-e\fP option.
.sp
.if n .RS 4
.nf
.fam C
$ cat map
\-Hello
+Bonjour
\-\-\-
\-DOE
+Durand
\-\-\-
$ echo \*(AqHello John DOE\*(Aq | sandr \-a map
Bonjour John Durand
.fam
.fi
.if n .RE
.sp
The map can contain multiline keys or values.
.sp
.if n .RS 4
.nf
.fam C
$ cat map
\-a
+X
+X
\-\-\-
\-b
+Y
\-\-\-
\-c
+Z
+Z
+Z
.fam
.fi
.if n .RE
.sp
is equivalent to (python syntax) :
.sp
.if n .RS 4
.nf
.fam C
{ \*(Aqa\*(Aq: \*(AqX\(rsnX\*(Aq, \*(Aqb\*(Aq: \*(AqY\*(Aq, \*(Aqc\*(Aq: \*(AqZ\(rsnZ\(rsnZ\*(Aq }
.fam
.fi
.if n .RE
.sp
So the result of the replacement is :
.sp
.if n .RS 4
.nf
.fam C
$ echo "abc" | sandr \-a map
X
XYZ
Z
Z
.fam
.fi
.if n .RE
.sp
.B Use option \f(CR\-m\fP to toggle \fBon\fP the multiline mode
.br
You can use \f(CR\(rsn\fP in patterns
.sp
.if n .RS 4
.nf
.fam C
$ printf "Hello John Doe\(rsnAnd Jane\(rsnDOE.\(rsn" | sandr \-m \-S \*(Aq((J\(rsw+)\(rss+(D\(rsw+))\*(Aq \-r \*(Aq\(rs1\*(Aq \-e > map
$ cat map
\-Jane
\-DOE
+Jane
+DOE
\-\-\-
\-John Doe
+John Doe
\-\-\-
.fam
.fi
.if n .RE
.sp
.B Use option \f(CR\-t\fP to simulate replacements
.br
.sp
.if n .RS 4
.nf
.fam C
$ echo \*(AqHello john doe\*(Aq > hello_john_doe.txt
$ sandr \-t \-i \-s hello \-r bye hello_john_doe.txt
bye john doe
.fam
.fi
.if n .RE
.sp
.B Use option \f(CR\-d\fP to simulate and view replacements
.br
.sp
.if n .RS 4
.nf
.fam C
$ sandr \-d \-i \-s hello \-r bye hello_john_doe.txt
{Hello=>bye} john doe
.fam
.fi
.if n .RE
.sp
.B Use option \f(CR\-R\fP to rename file when replacements can be done in filename
.br
.sp
.if n .RS 4
.nf
.fam C
$ sandr \-R \-d \-i \-s hello \-r bye hello_john_doe.txt
{Hello=>bye} john doe
File hello_john_doe.txt will be renamed to bye_john_doe.txt ({hello=>bye}_john_doe.txt)
$ sandr \-R \-i \-s hello \-r bye hello_john_doe.txt
Processed: hello_john_doe.txt (file renamed to bye_john_doe.txt)
$ ls
bye_john_doe.txt   sandr
$ cat bye_john_doe.txt
bye john doe
.fam
.fi
.if n .RE
.sp
.B Use option \f(CR\-x\fP to execute a command defined with \f(CR\-r\fP and replace the result
.br
The option is not compatible with \f(CR\-a\fP
.sp
.if n .RS 4
.nf
.fam C
$ cat file.txt
Hello John Doe
And Jane
DOE.
$ cat file.txt | sandr \-m \-S \*(Aq((J\(rsw+)\(rss+(D\(rsw+))\*(Aq \-r "echo \-n \*(Aq\(rs2\*(Aq | tr \*(AqaeiouyAEIOUY\*(Aq \*(Aq*\*(Aq" \-x
Hello J*hn
And J*n*.
.fam
.fi
.if n .RE
.SH "AUTHOR"
.sp
Written by Jean\-François Giraud.
.SH "COPYRIGHT"
.sp
Copyright \(co 2020 Jean\-François Giraud.  License GPLv3+: GNU GPL version 3 or later \c
.URL "http://gnu.org/licenses/gpl.html" "" "."
This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.